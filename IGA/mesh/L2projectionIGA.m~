function [ projectedTemperature ] = L2projectionIGA(problem, previousTemperature, previousKnotVector,...
    initialTemperature)
%L2PROJECTIONLINEARDISTRIBUTION project the previous solution onto the updated mesh at the
%new time step
%   previousTemperature = temeprature distribution of the previous mesh
%   updatedMesh = actual mesh configuration
%   previousmesh = previous mesh configuration
%   initialTemperature = initial temperature of the powder
%   refinementDepth = refinement dpeth of the last element

projectedTemperature = zeros(size(problem.coords,2), 1);

for j=1:size(problem.coords,2)
    x = linspace(problem.coords(j);
    globalProjectedValue = globalProjection(x, previousKnotVector, previousTemperature, problem);
    if globalProjectedValue ~= 0.0
        projectedTemperature(j) = globalProjectedValue;
    else
        projectedTemperature(j) = (previousTemperature(end))/(2^refinementDepth)...
            * (-j + (size(problem.coords,2))) + initialTemperature;
    end
end

end


function [ numericalSolutions ] = globalProjection(x, previousMesh, coefficients, problem)
% numericalSolutions = GLOBALPROJECTION(x, previousMesh, coefficients, problem) evaluates the numerical solution
% x = coordinates to post process
% previousMesh = mesh onto whom I project
% coefficients = coefficients of the basis function obtained by solving the mass matrix-load vector system of equations
% problem = transient poisson problem struct

previousKnotVector = previousMesh;
numericalSolutions=zeros(size(x));
Xi1 = previousKnotVector(1);
Xi2 = previousKnotVector(2);

numericalSolutions(x>=Xi1 & x<=Xi2) = localProjection(x(x>=Xi1 & x<=Xi2), previousKnotVector, 1,...
    coefficients, problem);

for e=2:problem.N
    Xi1 = previousKnotVector(e);
    Xi2 = previousKnotVector(e+1);
    
    numericalSolutions(x>Xi1 & x<=Xi2) = localProjection(x(x>Xi1 & x<=Xi2), previousKnotVector, e,...
        coefficients, problem, p, knotVector);
end
end

function r = localProjection(x, coords, element, coefficients, problem, p, knotVector)
% r = LOCALPROJECTION(x, coords, p, problem, element, coefficients, derivative) evaluates the numerical solution associated with a single specific element
%   x = points where the element numerical solution has to be evaluated
%   coords = coordinates of the mesh points
%   element = index of the element where to evaluate the element numerical solution
%   coefficients = coefficients of the basis function obtained by solving the mass matrix-load vector system of equations

X1 = coords(element);
X2 = coords(element+1);

Xi1 = problem.knotVector( element + problem.p );
Xi2 = problem.knotVector( element + problem.p + 1);

parentCoords = mapGlobalToLocal(x, Xi1, Xi2);

r = zeros(length(x));

for k=1:length(x)
    [N, ~] = BsplinesShapeFunctionsAndDerivatives(mapParentToLocal(parentCoords, Xi1, Xi2), p, knotVector);
    
    if isempty(r) == 0
        r(k) = r(k) + N(element:element+p) * coefficients(problem.LM(element,:));
    end
    
end

end



